圖靈機（英語：Turing machine），又稱確定型圖靈機，是英國數學家艾倫·圖靈於1936年提出的一種將人的計算行為抽象化的數學邏輯機，其更抽象的意義為一種計算模型，可以看作等價於任何有限邏輯數學過程的終極強大邏輯機器。
圖靈的基本思想是用機器來類比人們用紙筆進行數學運算的過程，他把這樣的過程看作下列兩種簡單的動作：
而在每個階段，人要決定下一步的動作，依賴於（a）此人當前所關注的紙上某個位置的符號和（b）此人當前思維的狀態。
為了類比人的這種運算過程，圖靈構造出一台假想的機器，該機器由以下幾個部分組成：
注意這個機器的每一部分都是有限的，但它有一個潛在的無限長的紙帶，因此這種機器只是一個理想的裝置。圖靈認為這樣的一台機器就能類比人類所能進行的任何計算過程。
一台圖靈機是一個七元有序組



(
Q
,
Σ
,
Γ
,
δ
,

q

0


,

q

a
c
c
e
p
t


,

q

r
e
j
e
c
t


)


{\displaystyle (Q,\Sigma ,\Gamma ,\delta ,q_{0},q_{accept},q_{reject})}

，其中



Q
,
Σ
,
Γ


{\displaystyle Q,\Sigma ,\Gamma }

都是有限集合，且滿足：
圖靈機



M
=
(
Q
,
Σ
,
Γ
,
δ
,

q

0


,

q

a
c
c
e
p
t


,

q

r
e
j
e
c
t


)


{\displaystyle M=(Q,\Sigma ,\Gamma ,\delta ,q_{0},q_{accept},q_{reject})}

將以如下方式運作：
開始的時候將輸入符號串




ω
=

ω

0



ω

1


…

ω

n
−
1


∈

Σ

∗




{\displaystyle \omega =\omega _{0}\omega _{1}\ldots \omega _{n-1}\in \Sigma ^{*}}


從左到右依此填在紙帶的第



0
,
1
,
…
,
n
−
1


{\displaystyle 0,1,\ldots ,n-1}

號格子上，其他格子保持空白（即填以空白符



◻


{\displaystyle \square }

)。




M


{\displaystyle M}

的讀寫頭指向第0號格子，




M


{\displaystyle M}

處於狀態




q

0




{\displaystyle q_{0}}

。機器開始執行後，按照轉移函式



δ


{\displaystyle \delta }

所描述的規則進行計算。例如，若當前機器的狀態為



q


{\displaystyle q}

，讀寫頭所指的格子中的符號為



x


{\displaystyle x}

，設



δ
(
q
,
x
)
=
(

q
′

,

x
′

,
L
)


{\displaystyle \delta (q,x)=(q',x',L)}

，則機器進入新狀態




q
′



{\displaystyle q'}

，將讀寫頭所指的格子中的符號改為




x
′



{\displaystyle x'}

，然後將讀寫頭向左移動一個格子。若在某一時刻，讀寫頭所指的是第0號格子，但根據轉移函式它下一步將繼續向左移，這時它停在原地不動。換句話說，讀寫頭始終不移出紙帶的左邊界。若在某個時刻



M


{\displaystyle M}

根據轉移函式進入了狀態




q

a
c
c
e
p
t




{\displaystyle q_{accept}}

，則它立刻停機並接受輸入的字串；
若在某個時刻



M


{\displaystyle M}

根據轉移函式進入了狀態




q

r
e
j
e
c
t




{\displaystyle q_{reject}}

，則它立刻停機並拒絕輸入的字串。
注意，轉移函式



δ


{\displaystyle \delta }

是一個部分函式，換句話說對於某些



q


{\displaystyle q}

,



x


{\displaystyle x}

，



δ
(
q
,
x
)


{\displaystyle \delta (q,x)}

可能沒有定義，如果在執行中遇到下一個操作沒有定義的情況，機器將立刻停機。
設



M
=
(
Q
,
Σ
,
Γ
,
δ
,

q

0


,

q

a
c
c
e
p
t


,

q

r
e
j
e
c
t


)


{\displaystyle M=(Q,\Sigma ,\Gamma ,\delta ,q_{0},q_{accept},q_{reject})}

是一台圖靈機，





e

2


=


{




e

1


−
1


d
=
L





e

1


+
1


d
=
R








{\displaystyle e_{2}={\begin{cases}e_{1}-1&d=L\\e_{1}+1&d=R\end{cases}}}






F

2


(
i
)
=


{




F

1


(
i
)


i
≠

e

1






x


i
=

e

1










{\displaystyle F_{2}(i)={\begin{cases}F_{1}(i)&i\neq e_{1}\\x&i=e_{1}\end{cases}}}

設



M


{\displaystyle M}

是一台圖靈機，將字串




ω
=

ω

0



ω

1


…

ω

n
−
1




{\displaystyle \omega =\omega _{0}\omega _{1}\ldots \omega _{n-1}}


作為其輸入，若存在格局序列




C

1


,

C

2


,
…
,

C

k




{\displaystyle C_{1},C_{2},\ldots ,C_{k}}

，使得





F

1


(
i
)
=


{




ω

i




0
≤
i
≤
n
−
1




◻




otherwise










{\displaystyle F_{1}(i)={\begin{cases}\omega _{i}&0\leq i\leq n-1\\\square &{\mbox{otherwise}}\end{cases}}}

則稱



M


{\displaystyle M}

 接受字串



ω


{\displaystyle \omega }

，且




C

1


,

C

2


,
…
,

C

k




{\displaystyle C_{1},C_{2},\ldots ,C_{k}}

稱為圖靈機



M


{\displaystyle M}

在輸入



ω


{\displaystyle \omega }

上的接受計算歷史。同理，若




C

k




{\displaystyle C_{k}}

是拒絕格局，則稱



M


{\displaystyle M}

 拒絕



ω


{\displaystyle \omega }

，且




C

1


,

C

2


,
…
,

C

k




{\displaystyle C_{1},C_{2},\ldots ,C_{k}}

稱為圖靈機



M


{\displaystyle M}

在輸入



ω


{\displaystyle \omega }

上的拒絕計算歷史。



M


{\displaystyle M}

所接受的所有字串的集合稱為



M


{\displaystyle M}

的語言，記作



L
(
M
)


{\displaystyle L(M)}

。
設



M
=
(
{
0
,
1
,
10
,
11
}
,
{
0
,
1
}
,
{
0
,
1
,
◻
}
,
δ
,
0
,
,
)


{\displaystyle M=(\{0,1,10,11\},\{0,1\},\{0,1,\square \},\delta ,0,,)}

和



δ
:
{
0
,
1
,
10
,
11
}
×
{
0
,
1
}
→
{
0
,
1
,
10
,
11
}
×
{
0
,
1
}
×
{
R
,
L
,
E
,
S
}


{\displaystyle \delta :\{0,1,10,11\}\times \{0,1\}\to \{0,1,10,11\}\times \{0,1\}\times \{R,L,E,S\}}

.
比如做一個以1的個數表示數值的加法運算，在磁帶上的資料是0000001110110000，就是3+2的意思。程式



δ


{\displaystyle \delta }

如下：
第一行程式0,0->0,0R意思就是如果機器讀到0，就將其變成0，狀態變為0，讀寫頭向右移動一格. R就是向右移動一格，L就是向左移一格，E是錯誤，S是停機. xx,y -> aa,b中xx是當前狀態, y是當前格子的值, aa是程式下一步的狀態, b是當前格的修改值。
雖然這裡給出與上面不同形式的定義，但兩者是等價的，這裡的定義能完成的工作並不比上面的定義多。
對於任意一個圖靈機，因為它的描述是有限的，因此我們總可以用某種方式將其編碼為字串。我們用



⟨
M
⟩


{\displaystyle \langle M\rangle }

表示圖靈機



M


{\displaystyle M}

的編碼。
我們可以構造出一個特殊的圖靈機，它接受任意一個圖靈機



M


{\displaystyle M}

的編碼



⟨
M
⟩


{\displaystyle \langle M\rangle }

，然後類比



M


{\displaystyle M}

的運作，這樣的圖靈機稱為通用圖靈機（Universal Turing Machine）。現代電腦的計算模型其實就是這樣一種通用圖靈機，它能接受一段描述其他圖靈機的程式，並執行程式實現該程式所描述的演算法。
圖靈機有很多變種，但可以證明這些變種的計算能力都是等價的，即它們辨識同樣的語言類。證明兩個計算模型



A


{\displaystyle A}

和



B


{\displaystyle B}

的計算能力等價的基本思想是：用



A


{\displaystyle A}

和



B


{\displaystyle B}

相互類比，若



A


{\displaystyle A}

可類比



B


{\displaystyle B}

且



B


{\displaystyle B}

可類比



A


{\displaystyle A}

，顯然他們的計算能力等價。注意這裡我們暫時不考慮計算的效率，只考慮計算的理論上「可行性」。
首先我們可以發現，改變圖靈機的帶字母表並不會改變其計算能力。例如我們可以限制圖靈機的帶字母表為



{
0
,
1
}


{\displaystyle \{0,1\}}

，這並不會改變圖靈機的計算能力，因為我們顯然可以用帶字母表為



{
0
,
1
}


{\displaystyle \{0,1\}}

的圖靈機類比帶字母表為任意有限集合



Γ


{\displaystyle \Gamma }

的圖靈機。
另一個要注意的是，如果我們允許圖靈機的紙帶兩端都可以無限伸展，這並不能增加圖靈機的計算能力，因為我們顯然可以用只有紙帶一端能無限伸展的圖靈機來類比這種紙帶兩端都可以無限伸展的圖靈機。
如果我們允許圖靈機的讀寫頭在某一步保持原地不動，那也不會增加其計算能力，因為我們可以用向左移動一次再向右移動一次來代替在原地不動。
其它的常見圖靈機變種包括：
除了圖靈機以外，人們還發明了很多其它的計算模型。包括：
然而這些模型無一例外地都和圖靈機的計算能力等價，因此邱奇，圖靈和哥德爾
提出了著名的邱奇-圖靈論題：一切直覺上能計算的函式都可用圖靈機計算，反之亦然。


