在電腦技術中，指令是由指令集架構定義的單個的CPU操作。在更廣泛的意義上，「指令」可以是任何可執行程式的元素的表述，例如位元組碼。
在傳統的構架上，指令包括一個操作碼（opcode）——它指定了要進行什麼樣的操作，例如「將記憶體中的內容與暫存器中的內容相加」——和零個或者更多的運算元（operand）——它可能指定了參與操作的暫存器、記憶體位址或者立即數（literal data）。運算元可能還包括定址方式，它確定了運算元的含義。[注 1]
在超長指令字（VLIW）構架中（包括很多微指令（microcode）構架）多個並行的操作和運算元在一條單獨的指令中被指定。
指令的長度相差懸殊，從一些微控制器（microcontroller）中的4位元（bit）到一些超長指令字系統中的幾百位。大部分現代的個人電腦、大型電腦、超大型電腦中的處理器的指令尺寸在16到64位元之間。在一些構架中，特別是RISC構架中，指令長度是固定的，通常與其構架的字長一致。在其他的構架中，指令有不同的長度，但通常是位元組或者半個字的整數倍。
構成程式的指令很少以它在機器內部的數值形式而直接的被使用；它們可以被程式設計師通過組合語言加以表示，或者，更常見的，被編譯器生成。
